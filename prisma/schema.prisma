// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum DayEnum {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum AttendanceEnum {
  Present
  Absent
  Leave
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Subject       Subject[]
  TimeTable     TimeTable[]
  Attendance    Attendance[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subject {
  id          String      @id @default(cuid())
  subjectName String
  subjectCode String?
  TimeTable   TimeTable[]
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  hasLab      Boolean     @default(false)

  @@unique([subjectName, subjectCode])
  @@index([userId])
}

model TimeTable {
  id            String       @id @default(cuid())
  timetableName String
  subject       Subject      @relation(fields: [subjectId], references: [id])
  subjectId     String
  dayName       DayEnum
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  isLab         Boolean      @default(false)
  startTime     DateTime     @db.Time
  endTime       DateTime     @db.Time
  Attendance    Attendance[]

  @@unique([subjectId, dayName, startTime, endTime])
  @@index([subjectId])
  @@index([userId])
}

model Attendance {
  id          String         @id @default(cuid())
  timetable   TimeTable      @relation(fields: [timetableId], references: [id])
  timetableId String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  date        DateTime
  status      AttendanceEnum

  @@unique([timetableId, userId, date])
  @@index([timetableId])
  @@index([userId])
}

model Holidays {
  id        String   @id @default(cuid())
  date      DateTime
  holiday   String
  isWeekend Boolean  @default(false)
}
